Constants

    Fixed values such as numbers, letters, and strings, are called "Constants" because their value does not change
    
    Numeric constants are as you expect

    String constants use single quotes (') or double quotes (")
Variables

    A variable is a named place in the memory where a programmer can store
    data and later retrieve the data using the variable "name"

    Programmers get to choose the names of the Variables

    You can change the contents of a variable in a leter statement
    x = 12.2
    y = 14
    x = 100 (x is now 100, it wipes out the old value)

Python variable name rules

    Must start with a letter or underscore_

    Must consist of letters, numerbers, and underscores

    Case Sensitive
        Good: spam eggs spam23 _speed
        Bad: 23spam #sign var.12
        Differenet: spam Spam SPAM

Mnemonic Variable names

    Since we programmers are given a choice in how we choose our
    variable names, there is a bit of "best practice"

    We name variables to help us remember what we intend to store in them
    (Mnemonic = memory aid)

    This can confuse beginning students because well-named varibles often "sound" 
    so good that they must be keywords

Assignment Statements

    We assign a value to a variable using the assignment statement (=)

    An assignment statement consists of an expression on the right hand side and a
    variable to store the result
    x = 3.9 * x * ( 1 - x )

Expressions

Numeric Expressions

    because of the lack of mathematical
    symbols on computer keyboards - we
    use "computer-speak" to express the classic math operations

    Asterisk is multiplication

    Exponentiation (Raise to a power) Looks different than in math

    xx = 2
    xx = xx + 2
    print(xx)

Order of Evaluation

    When we string operators together - Python must know which one to do first

    This is called "operator precedence

    Which operator "takes precedence" over the others?

Operator precedence rules
    Highest precedence rule to lower precedence rule
        Parentheses are alwasys respected
        Exponentiation (raise to a power)  
        multiplication, Division, And remainder
        addition and subtraction
        left to right

What does "Type" mean?
    In Python variables, literals, and constants have a "type"

    Python knows the difference between an integer number and a string
    
    for example "+" means, "addition" if something is a number and "concatenate" if something is a string

Type matters
    Python knows what "type" everything is 

    Some operatoins are prohibited

    You cannot "add 1" to a string

    We can ask python what type something is by using the type() function

Several Types of Numbers
    Numbers have two main types 
        integers are whole numbers
        floating point numbers have decimal parts
    There are other number types - they are variations on float and integer

Type Conversions
    When you put an integer and floating point in an expression the integer is implicitly converted to a float
    
    You can control this with the built-in functions int()
    and float()
Integer Division
    integer division produces a floating point result in python 3.0

    This was different in Python 2.x

String Conversions
    You can also use int() and float() to convert between strings and integers

    You will get an error if the string does not contain numeric characters

User Input
    We can instruct python to pause and read data from the user using the input()
    function

    The input() function returns a string

        nam = input("Who are you?")
        print("Welcome", nam)

Converting User input
    If we want to read a number from the user, we must convert it from a string to a number using a type conversion function

    Later we will deal with bad input data

Comments in python
    Anything afer a # is ignored by python

    Why comment?
        Describe what is going to happen in a sequence of converted
        Document who wrote the code or other ancillary information
        Turn off a line of code - Perhaps temporarily

Summary
    Type
    Reserved words
    Variables
    operators
    operator precedence
    integer division
    Conversion between types
    user input
    comments(#)